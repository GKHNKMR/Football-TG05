# .github/workflows/update.yml
name: weekly update predictions

on:
  schedule:
    - cron: "0 6 * * FRI"   # Every Friday 06:00 UTC
  workflow_dispatch:        # Allow manual trigger

permissions:
  contents: write           # Needed to commit/push predictions.json

concurrency:
  group: update-predictions
  cancel-in-progress: false

jobs:
  build-and-update:
    runs-on: ubuntu-latest

    env:
      PYTHONUNBUFFERED: "1"
      # Read API key from GitHub Secrets (configure in Repo Settings)
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Generate predictions (API mode)
        # If API fails/returns empty, you can comment this and keep your manual predictions.json.
        run: |
          python over05_prediction.py --from $(date -u +'%Y-%m-%d') --to $(date -u -d '+7 days' +'%Y-%m-%d')

      - name: Validate predictions.json (non-empty guard)
        run: |
          python - << 'PY'
          import json, sys, pathlib
          p = pathlib.Path("predictions.json")
          if not p.exists():
              print("ERROR: predictions.json not found", file=sys.stderr); sys.exit(1)
          data = json.loads(p.read_text(encoding="utf-8"))
          if not isinstance(data, list):
              print("ERROR: root is not a list", file=sys.stderr); sys.exit(1)
          if len(data) == 0:
              print("ERROR: predictions.json is empty; refusing to commit", file=sys.stderr); sys.exit(2)
          need = {"league","home","away","p_over_0_5"}
          if data:
              missing = need - set(data[0].keys())
              if missing:
                  print("ERROR: missing keys:", missing, file=sys.stderr); sys.exit(1)
          print(f"OK. items={len(data)}")
          PY

      - name: Commit and push if changed
        if: success()    # only commit when previous step passed
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add predictions.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Weekly predictions update: $(date -u +'%Y-%m-%d %H:%M UTC')"
            git push
          fi
